<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="14.0"
         DefaultTargets="Build"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <PropertyGroup>
    <RootDirectory Condition=" '$(RootDirectory)'=='' ">$(MSBuildThisFileDirectory)..\</RootDirectory>
    <OutputDirectory Condition=" '$(OutputDirectory)'=='' ">$(RootDirectory)bin\</OutputDirectory>
    <IntermediateOutputDirectory Condition=" '$(IntermediateOutputDirectory)'=='' ">$(RootDirectory)obj\</IntermediateOutputDirectory>
    <LibDirectory Condition="'$(LibDirectory)' == ''">$(RootDirectory)lib\</LibDirectory>
    <LocDirectory Condition="'$(LocDirectory)' == ''">$(RootDirectory)loc\</LocDirectory>
    <SourceDirectory Condition=" '$(SourceDirectory)'=='' ">$(RootDirectory)src\</SourceDirectory>
    <NugetDirectory Condition="'$(NugetDirectory)' == ''">$(UserProfile)\.nuget\packages\</NugetDirectory>

    <Configuration Condition=" '$(Configuration)'=='' ">Release</Configuration>
     <Year Condition="'$(Year)' == ''">$([System.DateTime]::Now.Year)</Year>
    <Date Condition="'$(Date)' == ''">$([System.DateTime]::Now.ToString("MMdd"))</Date>
    <Time Condition="'$(Time)' == ''">$([System.DateTime]::Now.ToString("HHmm"))</Time>

    <!-- We always should build Any CPU for consistency across assemblies. Otherwise one 
        component marked for x86 may lead to its references marked for x86 and same references 
        may be used for x64 executable. Setup will then package x86 binaries and x64 executable 
        will fail to load. We also should build as we build in VS and tell MSBUILD to NOT
        infer component bitness from the project that references it. We want all out binaries
        to be IL Only, bitness agnostic. -->
    <Platform>Any CPU</Platform>
    
    <Solution Condition="'$(Solution)' == ''">$(SourceDirectory)\R.sln</Solution>
    <SolutionProperties Condition="'$(SolutionProperties)' == ''">
      Configuration=$(Configuration);
      Platform=$(Platform);
      ShouldUnsetParentConfigurationAndPlatform=true;
      GenerateAssemblyVersionInfo=true;
      Year=$(Year);Date=$(Date);Time=$(Time);
      SolutionDir=$(SourceDirectory);
      BinDirectory=$(OutputDirectory);
      ObjDirectory=$(IntermediateOutputDirectory);
      LibDirectory=$(LibDirectory);
      LocDirectory=$(LocDirectory);
    </SolutionProperties>
  
    <SetupRemote Condition="'$(SetupRemote)' == ''">$(SourceDirectory)Windows\Setup\RemoteServices\RemoteServices.wixproj</SetupRemote>
    <SetupRHostRemote Condition="'$(SetupRemote)' == ''">$(SourceDirectory)Windows\Setup\RHostRemote\RHostRemote.wixproj</SetupRHostRemote>
    
    <SetupProperties Condition="'$(SetupProperties)' == ''">
      Configuration=$(Configuration);
      Platform=x86;
      GenerateAssemblyVersionInfo=false;
      SuppressValidation=true;
      Year=$(Year);
      Date=$(Date);
      Time=$(Time);
      BinDirectory=$(OutputDirectory);
      ObjDirectory=$(IntermediateOutputDirectory);
      LibDirectory=$(LibDirectory);
      LocDirectory=$(LocDirectory);
      DefineSolutionProperties=false;
    </SetupProperties>
  </PropertyGroup>

  <Target Name="ResetNuget">
    <ItemGroup>
      <ProjectLockJson Include="$(SourceDirectory)**\project.lock.json"/>
      <NugetProps Include="$(SourceDirectory)**\*.nuget.props"/>
      <NugetTargets Include="$(SourceDirectory)**\*.nuget.targets"/>
    </ItemGroup>
    <Copy SourceFiles="%(ProjectJson.FullPath)" DestinationFiles="@(ProjectJson -> '%(RootDir)%(Directory)project.json')" />
    <Delete Files="%(ProjectLockJson.FullPath)" />
    <Delete Files="%(NugetProps.FullPath)" />
    <Delete Files="%(NugetTargets.FullPath)" />
  </Target>

  <Target Name="Reset">
    <ItemGroup>
      <Bin Include="$(OutputDirectory)" />
      <Obj Include="$(IntermediateOutputDirectory)" />
    </ItemGroup>
    <CallTarget Targets="ResetNuget" />
    <RemoveDir Directories="%(Bin.FullPath);%(Obj.FullPath)" />
  </Target>

  <Target Name="Restore">
    <Message Text="SolutionProperties: $(SolutionProperties)" Importance="high" />
    <MSBuild Targets="Restore" Projects="$(Solution)" Properties="$(SolutionProperties)" BuildInParallel="true" />
  </Target>

  <Target Name="Clean">
    <Message Text="SolutionProperties: $(SolutionProperties)" Importance="high" />
    <MSBuild Targets="Clean" Projects="$(Solution)" Properties="$(SolutionProperties)" BuildInParallel="true" />

    <Message Text="SetupProperties: $(SetupProperties)" Importance="high" />
    <MSBuild Targets="Clean" Projects="$(SetupRHostRemote)" Properties="$(SetupProperties)" />
    <MSBuild Targets="Clean" Projects="$(SetupRemote)" Properties="$(SetupProperties)" />
  </Target>

  <Target Name="Build">
    <Error Text="DevEnvDir property should be specified" Condition="'$(DevEnvDir)' == ''" />
    
    <Message Text="SolutionProperties: $(SolutionProperties)" Importance="high" />
    <MSBuild Targets="Restore" Projects="$(Solution)" Properties="$(SolutionProperties)" BuildInParallel="true" />
    <MSBuild Targets="Build" Projects="$(Solution)" Properties="$(SolutionProperties)" BuildInParallel="true" />

    <Message Text="SetupProperties: $(SetupProperties)" Importance="high" />
    <MSBuild Targets="Build" Projects="$(SetupRHostRemote)" Properties="$(SetupProperties)" />
    <MSBuild Targets="Build" Projects="$(SetupRemote)" Properties="$(SetupProperties)" />
  </Target>

  <Target Name="Rebuild">
    <Error Text="DevEnvDir property should be specified" Condition="'$(DevEnvDir)' == ''" />
    
    <Message Text="SolutionProperties: $(SolutionProperties)" Importance="high" />
    <MSBuild Targets="Rebuild" Projects="$(Solution)" Properties="$(SolutionProperties)" BuildInParallel="true" />
    <MSBuild Targets="Rebuild" Projects="$(SetupRHostRemote)" Properties="$(SetupProperties)" />

    <Message Text="SetupProperties: $(SetupProperties)" Importance="high" />
    <MSBuild Targets="Rebuild" Projects="$(SetupRemote)" Properties="$(SetupProperties)" />
  </Target>
</Project>